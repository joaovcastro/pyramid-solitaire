class Game

instance variables
	-- The game's deck
	public deck: Deck;
	-- The Pyramid
	private pyramid: Pyramid;
	-- The draw pile
	private drawPile: Pile;
	-- The first waste pile
	public wastePile: Pile;
	-- The second waste pile
	public wastePile2: Pile;
	-- The player's score
	private score: int;

operations

	-- Constructor
	public Game: () ==> Game
	Game() == 
	(	
		deck := new Deck();
		-- Shuffle Deck		
		------- shuffle(deck); -------------
		-- Take 28 cards for Pyramid		
	--	pyramid := new Pyramid(deck);
		-- Put rest of cards on draw pile
	--	drawPile := new Pile(deck);
		-- Other piles start empty
		wastePile  := new Pile();
		wastePile2 := new Pile();
		-- Player starts with score 0
	--	score := 0;
	)
	post len deck.cards = 52;
	
	-- Shuffle Deck
	public shuffleDeck: () ==> ()
	shuffleDeck() == 
	(
			dcl newIndex : nat1;
    	dcl temp : Card;
    	
    	for i = 1 to len deck.cards do 
    	(
    		temp := deck.cards(i);
    		newIndex := MATH`rand(52) + 1;
    		deck.cards(i) := deck.cards(newIndex);
    		deck.cards(newIndex) := temp;
    	);
	)
	post len deck.cards = 52;
	
	-- Pair Cards
	public pairCards: Card * Card ==> ()
	pairCards(c1, c2) == 
	(	
		-- Check if card sum is 13
		if c1.getScore() + c2.getScore() = 13 
			then  IO`print("pair\n")
		else IO`print("not pair\n");
		-- Delete cards and return true
	 )
	 post len deck.cards  = 52;
	 
	 -- Print Deck
	 public printDeck: () ==> ()
	 printDeck() == 
	 (	
			for i = 1 to len deck.cards do
			(
				 IO`print(deck.cards(i).score);
				 IO`print(" ");
				 IO`print(deck.cards(i).suit);
				 IO`print("\n");
			)
		)
	
functions

traces


end Game