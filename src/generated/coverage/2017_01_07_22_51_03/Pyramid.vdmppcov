class Pyramid
	instance variables
			
			public cards : seq of Card;
			private numRows : nat1;
		
	operations
	
		-----------------
		-- Constructor --
		-----------------
		public Pyramid: ()  ==> Pyramid
			Pyramid() ==
			(
				cards := [];
				numRows := 7;
				return self
			)
		post cards = [] and numRows = 7;
			
		---------------------------
		-- Place Card in Pyramid --
		---------------------------
		public placeCard: Card ==> ()
			placeCard(c) == 
			(
			 cards := cards ^ [c];
			)
		post len cards >  len cards~ and len cards <= 28;
		
		---------------
		-- Get Cards --
		---------------
		public getCards: () ==> seq of Card
			getCards() == return cards
		pre len cards >= 0;
		
		----------------------------------------	
		-- Delete Card -> when pairs are done --
		----------------------------------------
		public deleteCard: nat ==> ()
			deleteCard(index) == cards(index) := new Card() 
		post len cards = 28;
		
		-------------------
		-- Print Pyramid --
		-------------------
		public print: () ==> ()
			print() == 
			(
				dcl index : nat1 := 1;
				IO`print("\n");
				for i = 1 to numRows do
				(
				  for j = 1 to i do 
				  (
				  	if cards(index).getScore() > 0 then
				  	(
					    IO`print(cards(index).getRank());
					    IO`print(cards(index).getSuit());
					    IO`print("        ");
					   	index := index +1;
				   	)
				   	else
				   	(
				   		IO`print(" ");
				   		IO`print("   ");
				   		IO`print("        ");
				   		index := index +1;
				   	)
				  );
				  IO`print("\n");
				);
			)
		post len cards = 28;
		
	
	
		-- Check if card is in pyramid and if its available --
		-------------------------------
		-- Remove cards from pyramid --
		-------------------------------
		public checkCard : (seq of char) * char ==> bool
			checkCard(rank, suit)  == 
			(
				dcl index : nat := 1;
				dcl row : nat1;
				dcl col : nat;
				dcl found : bool := false;
				dcl tempCard : Card;
				dcl score : nat := convertRank(rank);
				
				for i = 1 to numRows do
				(
					for j = 1 to i do
					(
						if cards(index).getScore() = score and cards(index).getSuit() = suit then
						(
							tempCard := cards(index);
						  row := i;
						  col := j;
							if checkValidCard(row, col) then
							( 
								found := true;
							)
						 );
						 index := index + 1;
					)
				);
			 return found;
			)
			pre rank in set {"A","2","3","4","5","6","7","8","9","10","J","Q","K"}
				and suit in set {'C','S','H','D'};
		
		-------------------------------
		-- Remove cards from pyramid --
		-------------------------------
		public removeCard : (seq of char) * char ==> bool
			removeCard(rank, suit)  == 
			(
				dcl index : nat := 1;
				dcl score : nat := convertRank(rank);
				
				for i = 1 to numRows do
				(
					for j = 1 to i do
					(
						if cards(index).getScore() = score and cards(index).getSuit() = suit then
						(
							cards(index) := new Card();
							return true;
						);
						 index := index + 1;
					)
				);
				return false;
			)
			pre rank in set {"A","2","3","4","5","6","7","8","9","10","J","Q","K"}
				and suit in set {'C','S','H','D'};
			
		
			
			
			-- check if chosen card is valid (no descendants)
			public checkValidCard : nat * nat ==> bool 
			checkValidCard(row, col) ==
			(
				if row = 7 then return true
				elseif (checkCardAtCoordinate(row+1, col) = false and checkCardAtCoordinate(row+1, col+1) = false) then return true
				else return false;
			)
			pre row > 0 and row <= 7 and col > 0 and col <= 7 ;
		
		-------------------------------------------------------
		-- Check Card From Coordinate                        --
		-- Check's if there's a card at a certain coordinate --
		-------------------------------------------------------
		public checkCardAtCoordinate : nat * nat ==> bool
		checkCardAtCoordinate(row, col) == 
		(
			dcl index : nat := getCardIndex(row, col);
			if cards(index).getScore() = 0 then return false;
			return true;
		)
		pre row > 0 and row <= 7 and col > 0 and col <= 7;
		
		
		-- Get Card Index
		public getCardIndex : nat * nat ==> nat
		getCardIndex(row, col) ==
		(
			dcl index : nat := 1;
			for i = 1 to col do
			(
				for j = 1 to i do
				(
					index := index + 1;
					if i = row and j = col then return index;
				)
			);
			return index;
		)
		pre row > 0 and row <= 7 and col > 0 and col <= 7
		post RESULT > 0 and RESULT <= 28;
		
		
		------------------
		-- Convert Rank --
		------------------
		public convertRank : seq of char ==> nat
		convertRank(rnk) == 
		(
			if rnk = "A" then return 1
			elseif rnk = "2" then return 2
			elseif rnk = "3" then return 3
			elseif rnk = "4" then return 4
			elseif rnk = "5" then return 5
			elseif rnk = "6" then return 6
			elseif rnk = "7" then return 7
			elseif rnk = "8" then return 8
			elseif rnk = "9" then return 9
			elseif rnk = "10" then return 10
			elseif rnk = "J"  then return 11
			elseif rnk = "Q"  then return 12
			else return 13;
		)
		post RESULT > 0 and RESULT <= 12;
		
		public getPyramidSize: () ==> nat
		getPyramidSize() ==
		(
			dcl index : nat := 1;
			dcl count : nat := 0;
			for i = 1 to numRows do
			(
				for j = 1 to i do
				(
					if cards(index).getScore() > 0 then count := count + 1;
					index := index + 1;
				)
			);
			return count;
		
		)
		post RESULT <= 28;
		
		
		
end Pyramid