class Pyramid
	instance variables
			
			public cards : seq of Card;
			private numRows : nat1;
		
	operations
	
		-----------------
		-- Constructor --
		-----------------
		public Pyramid: ()  ==> Pyramid
			Pyramid() ==
			(
				cards := [];
				numRows := 7;
				return self
			)
		post cards = [] and numRows = 7;
			
		---------------------------
		-- Place Card in Pyramid --
		---------------------------
		public placeCard: Card ==> ()
			placeCard(c) == 
			(
			 cards := cards ^ [c];
			);
	--	post len cards <= 28;
		
		---------------
		-- Get Cards --
		---------------
		public getCards: () ==> seq of Card
			getCards() == return cards;
		
		----------------------------------------	
		-- Delete Card -> when pairs are done --
		----------------------------------------
		public deleteCard: nat ==> ()
			deleteCard(index) == cards(index) := new Card() 
		post len cards = 28;
		
		-------------------
		-- Print Pyramid --
		-------------------
		public print: () ==> ()
			print() == 
			(
				dcl index : nat1 := 1;
				IO`print("\n");
				for i = 1 to numRows do
				(
				  for j = 1 to i do 
				  (
				    IO`print(cards(index).getScore());
				    IO`print(cards(index).getSuit());
				    IO`print("        ");
				   	index := index +1;
				  );
				  IO`print("\n");
				);
			)
		post len cards = 28;
		

		
		-----------------
		-- Select Card --
		-----------------
		public selectCard : seq of char * char ==> bool
			selectCard(rank, suit)  == 
			(
				dcl index : nat := 1;
				dcl row : nat1;
				dcl col : nat;
				dcl found : bool := false;
				dcl tempCard : Card;
				dcl score : nat := convertRank(rank);
				
				for i = 1 to numRows do
				(
					for j = 1 to i do
					(
						if cards(index).getScore() = score and cards(index).getSuit() = suit then
						(
							tempCard := cards(index);
						  row := i;
						  col := j;
						  found := true;
						  IO`print("row: ");
						  IO`print(row);
						  IO`print("     col: ");
						  IO`print(col);
						  IO`print("     index: ");
						  IO`print(index);
						  IO`print("     Score: ");
						  IO`print(tempCard.getScore());
						  IO`print("     Suit: ");
						  IO`print(tempCard.getSuit());
						  IO`print("\n");
						  return found;
						 );
						 index := index + 1;
					)
				);
			 return found;
			);
			--post index <= len cards;
		
		------------------
		-- Convert Rank --
		------------------
		public convertRank : seq of char ==> nat
		convertRank(rnk) == 
		(
			if rnk = "A" then return 1
			elseif rnk = "2" then return 2
			elseif rnk = "3" then return 3
			elseif rnk = "4" then return 4
			elseif rnk = "5" then return 5
			elseif rnk = "6" then return 6
			elseif rnk = "7" then return 7
			elseif rnk = "8" then return 8
			elseif rnk = "9" then return 9
			elseif rnk = "10" then return 10
			elseif rnk = "J"  then return 11
			elseif rnk = "Q"  then return 12
			else return 13;
		);
		
end Pyramid